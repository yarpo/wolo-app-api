openapi: 3.0.1
info:
  title: WoloApp
  version: "1.0.0"
  description: >-
    The WoloApp API facilitates the management of events and user participation
    through Create, Read, Update, and Delete operations. It allows users to
    interact with the following key functionalities such as exploring events
    through different filters or joining them.
  termsOfService: >-
    https://opensource.guide/legal/?fbclid=IwAR0NUY2SAm3x5HHkhxOmb6piB-WETsmqeifvIB5_pBrHWFhQu31oYBl7WJs
  contact:
    name: Agata Dobrzyniewicz
    email: s24305@pjwstk.edu.pl
servers:
  - url: http://localhost:8080
    description: local
paths:
  /health:
    get:
      tags:
        - Health check
      operationId: checkHealth
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: App is healthy
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /auth/current:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: User must exist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
  /auth/authenticate:
    post:
      tags:
        - Authentication
      summary: Log to your account
      description: User must exist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/AuthenticationRespons'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Log out from your account
      description: User must be logged
      responses:
        '200':
          $ref: '#/components/responses/OK'
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new account
      description: User doesn't exist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/AuthenticationRespons'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
  /categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      operationId: getCategories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDto'
  /categories/{id}:
    get:
      tags:
        - Categories
      summary: Get category by id
      description: Category must exist
      operationId: getCategoryById
      parameters:
        - name: id
          in: path
          description: Category id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDto'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /categories/add:
    post:
      tags:
        - Categories
      summary: Adding new category
      description: id = null
      operationId: addCategory
      parameters:
        - name: category
          in: query
          description: Category object to create
          schema:
            $ref: '#/components/schemas/CategoryDto'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/Created'
  /categories/edit:
    put:
      tags:
        - Categories
      summary: Edit category
      description: Category must exist
      operationId: editCategory
      parameters:
        - name: category
          in: query
          description: Category object with changes
          schema:
            $ref: '#/components/schemas/CategoryDto'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
        required: true
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
  /categories/delete/{id}:
    delete:
      tags:
        - Categories
      summary: Delete category
      description: All events from this category will be assigned to Basic category
      operationId: deleteCategory
      parameters:
        - name: id
          in: path
          description: Category id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
  /cities:
    get:
      tags:
        - Cities
      summary: Show all cities
      operationId: getAllCities
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CityDto'
  /cities/{id}:
    get:
      tags:
        - Cities
      summary: Get city by id
      description: City must exist
      operationId: getCityById
      parameters:
        - name: id
          in: path
          description: City id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CityDto'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /cities/add:
    post:
      tags:
        - Cities
      summary: Adding new city
      description: id = null, district = null
      operationId: addCity
      parameters:
        - name: city
          in: query
          description: CityDto object to create
          schema:
            $ref: '#/components/schemas/CityDto'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CityDto'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/Created'
  /cities/edit:
    put:
      tags:
        - Cities
      summary: Edit city
      description: City must exist
      operationId: editCity
      parameters:
        - name: city
          in: query
          description: cityDto object with changes
          schema:
            $ref: '#/components/schemas/CityDto'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CityDto'
        required: true
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
  /cities/delete/{id}:
    delete:
      tags:
        - Cities
      summary: Delete city
      description: >-
        City will not be removed from DB, but isOld property will became
        true
      operationId: deleteCity
      parameters:
        - name: id
          in: path
          description: City id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
  /districts:
    get:
      tags:
        - Districts
      summary: Get all districts
      operationId: getDistricts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DistrictResponseDto'
  /districts/{id}:
    get:
      tags:
        - Districts
      summary: Get district by id
      description: District must exist
      operationId: getDistrictById
      parameters:
        - name: id
          in: path
          description: District id
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DistrictResponseDto'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /districts/add:
    post:
      tags:
        - Districts
      summary: Adding new district
      description: id = null
      operationId: addDistrict
      parameters:
        - name: district
          in: query
          description: District object to create
          schema:
            $ref: '#/components/schemas/DistrictRequestDto'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DistrictRequestDto'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/Created'
  /districts/edit:
    put:
      tags:
        - Districts
      summary: Edit district
      description: District must exist
      operationId: editDistrict
      parameters:
        - name: district
          in: query
          description: district object with changes
          schema:
            $ref: '#/components/schemas/DistrictRequestDto'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DistrictRequestDto'
        required: true
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /districts/delete/{id}:
    delete:
      tags:
        - Districts
      summary: Delete district
      description: >-
        District will not be removed from DB, but isOld property will became
        true
      operationId: deleteDistrict
      parameters:
        - name: id
          in: path
          description: District id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
  /events:
    get:
      tags:
        - Event
      summary: Get all events
      operationId: getEvents
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventResponseDto'
  /events/{id}:
    get:
      tags:
        - Event
      summary: Get event by id
      description: Event must exist
      operationId: getEventById
      parameters:
        - name: id
          in: path
          description: Event id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponseDetailsDto'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /events/need:
    get:
      tags:
        - Event
      summary: Get list of events for They Need You
      operationId: getTheyNeedYouList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventResponseDto'
  /events/upcoming:
    get:
      tags:
        - Event
      summary: Get only upcoming events
      operationId: getUpcomingEvents
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventResponseDto'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /events/users:
    get:
      tags:
        - Event
      summary: Get short information about users by shift id
      description: Shift must exist
      operationId: getUsersByShift
      parameters:
        - name: shift
          in: query
          description: shift id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserShortResponse'

  /events/users/pdf:
    get:
      tags:
        - Event
      summary: Get PDF report with list of users signed up to shifts on this event
      description: |
        Retrieves a PDF report containing short information about users assigned to a specific shift.
        The PDF report will contain details such as user names, phone numbers, and emails for the specified shift.
      operationId: getListOfUsersAsPDF
      parameters:
        - name: id
          in: query
          description: ID of the event for which to generate the PDF report
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: PDF report generated successfully
          content:
            application/pdf:
              schema:
                type: string
                format: binary
              example: <binary PDF data>
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /events/search:
    get:
      tags:
        - Event
      summary: Filter events
      operationId: filterEvents
      parameters:
        - name: localization
          in: query
          description: Array of District names
          required: false
          schema:
            type: array
            items:
              type: string
        - name: startDate
          in: query
          description: >-
            The beginning of the time interval within which to search for an
            event
          required: false
          schema:
            type: string
            format: date
          example: '2022-01-01'
        - name: endDate
          in: query
          description: The end of the time interval within which to search for an event
          required: false
          schema:
            type: string
            format: date
          example: '2022-12-31'
        - name: categories
          in: query
          description: Array of category ids
          schema:
            type: array
            items:
              type: integer
              format: int64
        - name: organizer
          in: query
          description: Id of the organization organizing the event
          required: false
          schema:
            type: integer
            format: int64
            example: 1
        - name: ageRestriction
          in: query
          description: From what age are participants allowed
          required: false
          schema:
            type: integer
          example: 18
        - name: isPeselVerificationRequired
          in: query
          description: Whether pesel verification is required
          schema:
            type: boolean
        - name: showWithAvailableCapacity
          in: query
          description: Show only those events that are still looking for volunteers
          schema:
            type: boolean
        - name: category
          in: query
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int64
        - name: verification
          in: query
          required: false
          schema:
            type: boolean
        - name: showAvailable
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventResponseDto'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /events/add:
    post:
      tags:
        - Event
      summary: Adding new event by organisation
      operationId: addEvent
      parameters:
        - name: language
          in: query
          description: Language of eventDto
          required: true
          schema:
            type: string
          example: EN
        - name: event
          in: query
          description: Event object to create
          schema:
            $ref: '#/components/schemas/EventRequestDto'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequestDto'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/Created'

  /events/admin/add:
    post:
      tags:
        - Event
      summary: Adding new event by admin
      operationId: addEventByAdmin
      parameters:
        - name: language
          in: query
          description: Language of eventDto
          required: true
          schema:
            type: string
          example: EN
        - name: event
          in: query
          description: Event object to create
          schema:
            $ref: '#/components/schemas/EventRequestDto'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequestDto'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/Created'

  /events/join:
    post:
      tags:
        - Event
      summary: The user join shift of the event
      operationId: joinEvent
      parameters:
        - name: shift
          in: query
          description: Id of the shift user wants to join
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /events/refuse:
    post:
      tags:
        - Event
      summary: The user refuses to participate in the event
      operationId: refuseParticipateInEvent
      parameters:
        - name: shift
          in: query
          description: Id of the shift from which the user wants to unsubscribe
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequestResponse'

  /events/admin/edit/{id}:
    put:
      tags:
        - Event
      summary: Edit event by admin
      description: Only upcomming events can be changed
      operationId: editEventByAdmin
      parameters:
        - name: event
          in: query
          description: event object with changes
          schema:
            $ref: '#/components/schemas/EventRequestDto'
        - name: id
          in: path
          description: event id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequestDto'
        required: true
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /events/edit/{id}:
    put:
      tags:
        - Event
      summary: Edit event by organisation
      description: Only upcomming events can be changed
      operationId: editEvent
      parameters:
        - name: event
          in: query
          description: event object with changes
          schema:
            $ref: '#/components/schemas/EventRequestDto'
        - name: id
          in: path
          description: event id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequestDto'
        required: true
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /events/delete/{id}:
    delete:
      tags:
        - Event
      summary: Delete event by organisation
      description: Only upcoming events can be deleted
      operationId: deleteEvent
      parameters:
        - name: id
          in: path
          description: Event id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'

  /events/admin/delete/{id}:
    delete:
      tags:
        - Event
      summary: Delete event by admin
      description: Only upcoming events can be deleted
      operationId: deleteEventByAdmin
      parameters:
        - name: id
          in: path
          description: Event id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'

  /organisations:
    get:
      tags:
        - Organisations
      summary: Get all organisations
      operationId: getOrganisations
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganisationResponseDto'
  /organisations/{id}:
    get:
      tags:
        - Organisations
      summary: Get organisation by id
      description: Organisation must exist
      operationId: getOrganisationById
      parameters:
        - name: id
          in: path
          description: Organisation id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationResponseDto'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /organisations/{id}/events:
    get:
      tags:
        - Organisations
      summary: Get all events from the selected organisation
      operationId: getEventsByOrganisation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventResponseDto'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /organisations//events/current/{id}:
    get:
      tags:
        - Organisations
      summary: Get all current events from the selected organisation
      operationId: getCurrenEventsByOrganisation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventResponseDto'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /organisations/events/past/{id}:
    get:
      tags:
        - Organisations
      summary: Get all past events from the selected organisation
      operationId: getPastEventsByOrganisation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventResponseDto'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /organisations/add:
    post:
      tags:
        - Organisations
      summary: Adding new organisation
      description: id = null
      operationId: addOrganisation
      parameters:
        - name: organisationDto
          in: query
          description: Organisation object to create
          schema:
            $ref: '#/components/schemas/OrganisationRequestDto'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganisationRequestDto'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/Created'
  /organisations/approve:
    post:
      tags:
        - Organisations
      summary: Approve organisation (by admin)
      description: Organisation must exist
      operationId: approveOrganisation
      parameters:
        - name: id
          in: query
          description: Organisation id to approve
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
  /organisations/disapprove:
    post:
      tags:
        - Organisations
      summary: Disapprove organisation (by admin)
      description: Organisation must exist
      operationId: disapproveOrganisation
      parameters:
        - name: id
          in: query
          description: Organisation id to disapprove
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /organisations/{id}/edit:
    put:
      tags:
        - Organisations
      summary: Edit organisation
      description: Organisation must exist
      operationId: editOrganisation
      parameters:
        - name: organisation
          in: query
          description: Organisation object with changes
          schema:
            $ref: '#/components/schemas/OrganisationRequestDto'
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganisationRequestDto'
        required: true
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /roles:
    get:
      tags:
        - Roles
      summary: Get all rols
      operationId: getRoles
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleDto'
  /roles/{id}:
    get:
      tags:
        - Roles
      summary: Get role by id
      description: Role must exist
      operationId: getRoleById
      parameters:
        - name: id
          in: path
          description: Role id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDto'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /roles/add:
    post:
      tags:
        - Roles
      summary: Adding new role
      description: id = null
      operationId: addRole
      parameters:
        - name: role
          in: query
          description: Role object to create
          schema:
            $ref: '#/components/schemas/RoleDto'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDto'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/Created'
  /roles/edit:
    put:
      tags:
        - Roles
      summary: Edit role
      description: Role must exist
      operationId: editRole
      parameters:
        - name: role
          in: query
          description: Role object with changes
          schema:
            $ref: '#/components/schemas/RoleDto'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDto'
        required: true
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /roles/delete/{id}:
    delete:
      tags:
        - Roles
      summary: Delete role
      description: all users who had deleted role will be assigned the role "USER"
      operationId: deleteRole
      parameters:
        - name: id
          in: path
          description: Role id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /reports/all:
    get:
      tags:
        - Reports
      summary: Get all reports from one event
      operationId: getAllReportsByEventId
      parameters:
        - name: eventId
          in: query
          description: Event Id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportDto'

  /reports/public/{id}:
    get:
      tags:
        - Reports
      summary: Get public report by event id
      description: Report and event must exist
      operationId: getPublicReportByEventId
      parameters:
        - name: id
          in: path
          description: Report id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportDto'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /reports/add:
    post:
      tags:
        - Reports
      summary: Adding report
      description: id = null
      operationId: addReport
      parameters:
        - name: report
          in: query
          description: Report object to create
          schema:
            $ref: '#/components/schemas/ReportDto'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportDto'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/Created'
  /reports/edit:
    put:
      tags:
        - Reports
      summary: Edit report
      description: Report must exist
      operationId: editReport
      parameters:
        - name: report
          in: query
          description: Report object with changes
          schema:
            $ref: '#/components/schemas/ReportDto'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportDto'
        required: true
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /reports/delete/{id}:
    delete:
      tags:
        - Reports
      summary: Delete report
      operationId: deleteReport
      parameters:
        - name: id
          in: path
          description: Report id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      operationId: getUsers
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDto'
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by id
      description: User must exist
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /users/{id}/shifts:
    get:
      tags:
        - Users
      summary: Get all user shifts
      description: User must exist
      operationId: getUserShifts
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShiftResponseDto'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /users/events/{id}:
    get:
      tags:
        - Users
      summary: Get all user events
      operationId: getUserEvents
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventResponseDto'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /users/shifts/current:
    get:
      tags:
        - Users
      summary: Get all current events
      operationId: getUserCurrentShifts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShiftResponseDto'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /users/shifts/past:
    get:
      tags:
        - Users
      summary: Get all user past events
      operationId: getUserPastSifts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShiftResponseDto'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /users/volunteers:
    get:
      tags:
        - Users
      summary: Get all users with only user role
      operationId: getUsersWithRole
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserShortResponse'
  /users/assign:
    post:
      tags:
        - Users
      summary: Make user moderator of organisation
      description: User and organisation must exist
      operationId: assignOrganisation
      parameters:
        - name: user
          in: query
          description: User id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
        - name: organisation
          in: query
          description: Organisation id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /users/changerole:
    post:
      tags:
        - Users
      summary: Change user's roles
      description: User must exist
      operationId: changeRole
      parameters:
        - name: user
          in: query
          description: User id
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        - name: roles
          in: query
          description: New Roles Ids
          required: true
          schema:
            maxItems: 2147483647
            minItems: 1
            type: array
            items:
              type: integer
              format: int64
              example: 1
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /users/revoke:
    post:
      tags:
        - Users
      summary: Revoke the user from the role of moderator of the organization
      description: User and organisation must exist
      operationId: revokeOrganisation
      parameters:
        - name: user
          in: query
          description: User id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /users/{id}/edit:
    put:
      tags:
        - Users
      summary: Edit user
      description: User must exist
      operationId: editUser
      parameters:
        - name: user
          in: query
          description: User object with changes
          schema:
            $ref: '#/components/schemas/UserRequestDto'
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDto'
        required: true
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
  /users/delete/{id}:
    delete:
      tags:
        - Users
      summary: Delete user
      description: If the user has the moderator role, it cannot be deleted
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
components:
  responses:
    OK:
      description: OK
      content:
        application/hal+json:
          schema:
            type: string
            example: Ok
            enum:
              - 200 OK
    Created:
      description: Created
      content:
        application/hal+json:
          schema:
            type: string
            example: Created
            enum:
              - 201 CREATED
    NoContentResponse:
      description: No content
      content:
        application/hal+json:
          schema:
            type: string
            example: No Content
            enum:
              - 204 NO_CONTENT
    BadRequestResponse:
      description: Bad Request
      content:
        application/hal+json:
          schema:
            type: string
            example: Bad Request
            enum:
              - 400 BAD_REQUEST
    NotFoundResponse:
      description: Not Found
      content:
        application/hal+json:
          schema:
            type: string
            example: Not Found
            enum:
              - 404 NOT_FOUND
    InternalServerError:
      description:   Internal Server Error
      content:
        application/hal+json:
          schema:
            type: string
            example: Internal Server Error
            enum:
              - 500 INTERNAL_SERVER_ERROR
  schemas:
    AuthenticationRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    AuthenticationRespons:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    CategoryDto:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          maxLength: 50
          minLength: 0
          type: string
          example: Health
    CityDto:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          maxLength: 50
          minLength: 0
          type: string
          example: New York City
        districts:
          maxItems: 2147483647
          minItems: 1
          type: array
          items:
            maxLength: 50
            minLength: 0
            type: string
            example: Brodway 123
    DistrictRequestDto:
      required:
        - name
        - cityId
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          maxLength: 50
          minLength: 0
          type: string
          example: DownTown
        cityId:
          type: integer
          format: int64
          example: 1
    DistrictResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          maxLength: 50
          minLength: 0
          type: string
          example: DownTown
        cityName:
          maxLength: 50
          minLength: 0
          type: string
          example: New York City
    EventRequestDto:
      required:
        - name
        - description
        - organisationId
        - categories
        - shifts
        - date
      type: object
      properties:
        name:
          maxLength: 250
          minLength: 0
          type: string
          example: Animal shelter assistance
        description:
          type: string
          example: >-
            Are you passionate about making a positive impact on the lives of
            animals in need? Join us in our mission 

            to provide compassionate care and support for animals at our local
            animal shelter. 

            As an Animal Shelter Assistant, you play a crucial role in ensuring
            the well-being 

            and happiness of animals awaiting their forever homes.


            Responsibilities:

                Animal Care:
                    Feed, groom, and provide basic care for shelter animals.
                    Ensure clean and sanitary living conditions for all animals.

                Assistance with Adoptions:
                    Interact with potential adopters and provide information about available animals.
                    Assist in the adoption process, ensuring a smooth transition for both the animal and the new owner.
        organisationId:
          type: integer
          format: int64
          example: 1
        categories:
          type: array
          items:
            type: integer
            format: int64
            example: 1
        isPeselVerificationRequired:
          type: boolean
        isAgreementNeeded:
          type: boolean
        imageUrl:
          maxLength: 255
          minLength: 0
          type: string
        date:
          type: string
          format: date
        shifts:
          maxItems: 2147483647
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/ShiftRequestDto'
        cityId:
          type: integer
          format: int64
          example: 1

    EventResponseDetailsDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        namePL:
          type: string
          example: Pomoc w schronisku dla zwierząt
        nameEN:
          type: string
          example: Pomoc w schronisku dla zwierząt
        nameUA:
          type: string
          example: Допомога притулку для тварин
        nameRU:
          type: string
          example: Помощь приюту для животных
        organisationId:
          type: integer
          format: int64
          example: 1
        organisationName:
          type: string
          example: 'Compassion Paws: Animal Shelter Support Initiative'
        isPeselVerificationRequired:
          type: boolean
        isAgreementNeeded:
          type: boolean
        descriptionEN:
          type: string
          example: >-
            Are you passionate about making a positive impact on the lives of
            animals in need? Join us in our mission 

            to provide compassionate care and support for animals at our local
            animal shelter. 

            As an Animal Shelter Assistant, you play a crucial role in ensuring
            the well-being 

            and happiness of animals awaiting their forever homes.


            Responsibilities:

                Animal Care:
                    Feed, groom, and provide basic care for shelter animals.
                    Ensure clean and sanitary living conditions for all animals.

                Assistance with Adoptions:
                    Interact with potential adopters and provide information about available animals.
                    Assist in the adoption process, ensuring a smooth transition for both the animal and the new owner.
        descriptionPL:
          type: string
          example: >-
            Czy pasjonujesz się wywieraniem pozytywnego wpływu na życie ludzi
            zwierzęta w potrzebie? Dołącz do nas w naszej misji aby zapewnić współczującą opiekę i wsparcie zwierzętom w naszej okolicy
            Schronisko dla zwierząt.

            Jako asystent schroniska dla zwierząt odgrywasz kluczową rolę w zapewnianiu dobre samopoczucie 
            i szczęście zwierząt oczekujących na swoje stałe domy.

            Obowiązki:
            Opieka nad zwierzętami:karmić, pielęgnować i zapewniać podstawową opiekę zwierzętom ze schroniska.
            Zapewnij wszystkim zwierzętom czyste i higieniczne warunki życia.

            Pomoc przy adopcjach: wejdź w interakcję z potencjalnymi adopcjami i przekaż informacje o dostępnych zwierzętach.
            Pomagaj w procesie adopcji, zapewniając płynną zmianę zarówno zwierzęciu, jak i nowemu właścicielowi.
        descriptionUA:
          type: string
          example: >-
            Ви прагнете позитивно вплинути на життя тварини в потребі? Приєднуйтесь до нашої місії
            надавати співчутливу турботу та підтримку тваринам у нашому закладі притулок для тварин.
            Як помічник у притулку для тварин, ви відіграєте вирішальну роль у забезпеченні благополуччя
            і щастя тварин, які чекають своїх вічних домівок.
            Обов'язки: догляд за тваринами:
            Годуйте, доглядайте та забезпечуйте основний догляд за тваринами з притулку.
            Забезпечити чисті та санітарні умови проживання для всіх тварин.
            Допомога з усиновленням:
            Спілкуйтеся з потенційними усиновлювачами та надайте інформацію про доступних тварин.
            Допомога в процесі усиновлення, забезпечуючи плавний перехід як для тварини, так і для нового власника.
        descriptionRU:
          type: string
          example: >-
            Уход за животными:

                Кормление, уход и обеспечение основных потребностей животных в приюте.
                Обеспечение чистых и санитарных условий проживания для всех подопечных.

            Помощь в усыновлении:

                Общение с потенциальными усыновителями и предоставление информации о доступных животных.
                Помощь в процессе усыновления, обеспечивая плавный переход как для животного, так и для нового владельца.
        categories:
          type: array
          items:
            type: string
            example: Health
        imageUrl:
          maxLength: 255
          minLength: 0
          type: string
          example: https://example.com/image.jpg
        shifts:
          maxItems: 2147483647
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/ShiftResponseDto'
        city:
          type: string
          example: New York City
    EventResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Animal shelter assistance
        organisation:
          type: string
          example: 'Compassion Paws: Animal Shelter Support Initiative'
        peselVerificationRequired:
          type: boolean
        categories:
          type: array
          items:
            type: string
            example: Health
        city:
          type: string
          example: New York City
        imageUrl:
          maxLength: 255
          minLength: 0
          type: string
          example: https://example.com/image.jpg
        shifts:
          maxItems: 2147483647
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/ShiftResponseDto'
    OrganisationRequestDto:
      required:
        - name
        - description
        - email
        - phoneNumber
        - street
        - homeNum
        - districtId
        - cityId
        - moderatorId
      type: object
      properties:
        name:
          maxLength: 250
          minLength: 0
          type: string
          example: Animal Helpers
        description:
          type: string
          example: >-
            Are you passionate about making a positive impact on the lives of
            animals in need? Animal Helpers is

            dedicated to providing compassionate care and support for animals at
            our local animal shelter.

            As part of our organization, you'll have the opportunity to play a
            vital role in ensuring the well-being

            and happiness of animals awaiting their forever homes.


            Our Mission:
                - Provide shelter and care for animals in need.
                - Facilitate adoptions and find loving homes for our animals.
                - Educate the community about responsible pet ownership and animal welfare.

            Volunteer Opportunities:
                - Animal Care: Assist in feeding, grooming, and providing basic care for shelter animals.
                - Adoption Assistance: Interact with potential adopters and facilitate the adoption process.
                - Community Outreach: Participate in events and educational programs to promote animal welfare.

            Join us today and make a difference in the lives of animals in need!
        email:
          maxLength: 50
          minLength: 0
          type: string
        phoneNumber:
          maxLength: 9
          minLength: 9
          pattern: '[0-9]{9}'
          type: string
        street:
          maxLength: 50
          minLength: 0
          type: string
        homeNum:
          maxLength: 10
          minLength: 0
          type: string
        districtId:
          type: integer
          format: int64
          example: 1
        cityId:
          type: integer
          format: int64
          example: 1
        moderatorId:
          type: integer
          format: int64
          example: 1
        logoUrl:
          maxLength: 255
          minLength: 0
          type: string
          example: https://example.com/image.jpg
    OrganisationResponseDto:
      type: object
      properties:
        name:
          maxLength: 250
          minLength: 0
          type: string
          example: Animal Helpers
        description:
          type: string
          example: >-
            Are you passionate about making a positive impact on the lives of
            animals in need? Animal Helpers is

            dedicated to providing compassionate care and support for animals at
            our local animal shelter.

            As part of our organization, you'll have the opportunity to play a
            vital role in ensuring the well-being

            and happiness of animals awaiting their forever homes.


            Our Mission:
                - Provide shelter and care for animals in need.
                - Facilitate adoptions and find loving homes for our animals.
                - Educate the community about responsible pet ownership and animal welfare.

            Volunteer Opportunities:
                - Animal Care: Assist in feeding, grooming, and providing basic care for shelter animals.
                - Adoption Assistance: Interact with potential adopters and facilitate the adoption process.
                - Community Outreach: Participate in events and educational programs to promote animal welfare.

            Join us today and make a difference in the lives of animals in need!
        email:
          maxLength: 50
          minLength: 0
          type: string
          example: example@mail.com
        phoneNumber:
          maxLength: 9
          minLength: 9
          type: string
        street:
          maxLength: 50
          minLength: 0
          type: string
          example: Broadway
        homeNum:
          maxLength: 10
          minLength: 0
          type: string
          example: 123
        logoUrl:
          maxLength: 255
          minLength: 0
          type: string
          example: https://example.com/image.jpg
    ReportDto:
      required:
        - report
        - event
      properties:
        id:
          type: integer
          format: int64
          example: 1
        report:
          type: string
        published:
          type: boolean
        event:
          type: integer
          format: int64
          example: 1
    RegistrationRequest:
      required:
        - firstName
        - lastName
        - email
        - phoneNumber
        - password
      properties:
        firstName:
          maxLength: 50
          minLength: 0
          type: string
          example: John
        lastName:
          maxLength: 50
          minLength: 0
          type: string
          example: Doe
        email:
          maxLength: 50
          minLength: 0
          type: string
          example: example@mail.com
        phoneNumber:
          maxLength: 9
          minLength: 9
          pattern: '[0-9]{9}'
          type: string
        isAdult:
          type: boolean
        password:
          maxLength: 255
          minLength: 0
          type: string
          example: password
    RoleDto:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          maxLength: 20
          minLength: 0
          type: string
          example: USER
    ShiftInfoRespons:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        startTime:
          $ref: '#/components/schemas/LocalTime'
        endTime:
          $ref: '#/components/schemas/LocalTime'
        date:
          type: string
          format: date
        shiftDirections:
          type: string
          example: Left Side of Building
        eventId:
          type: integer
          format: int64
          example: 1
        eventName:
          type: string
          example: Animal Helpers
        address:
          type: string
          example: Brodway 123
    ShiftRequestDto:
      required:
        - startTime
        - endTime
        - date
        - capacity
        - street
        - homeNum
        - districtId
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        startTime:
          $ref: '#/components/schemas/LocalTime'
        endTime:
          $ref: '#/components/schemas/LocalTime'
        date:
          type: string
          format: date
        capacity:
          type: integer
          format: int32
        isLeaderRequired:
          type: boolean
        requiredMinAge:
          type: integer
          format: int32
        shiftDirections:
          type: string
          example: Left Side of Building
        street:
          maxLength: 50
          minLength: 0
          type: string
          example: Broadway
        homeNum:
          maxLength: 10
          minLength: 0
          type: string
          example: 123
        districtId:
          type: integer
          format: int64
          example: 1

    ShiftResponseDto:
      type: object
      properties:
        shiftId:
          type: integer
          format: int64
          example: 1
        eventId:
          type: integer
          format: int64
          example: 1
        eventNamePL:
          type: string
          example: Pomocnicy zwierząt
        eventNameEN:
          type: string
          example: Animal Helpers
        eventNameUA:
          type: string
          example: Помічники тварин
        eventNameRU:
          type: string
          example: Помощники для животных
        startTime:
          $ref: '#/components/schemas/LocalTime'
        endTime:
          $ref: '#/components/schemas/LocalTime'
        capacity:
          type: integer
          format: int32
          example: 5
        isLeaderRequired:
          type: boolean
        requiredMinAge:
          type: integer
          format: int32
          example: 12
        registeredUsers:
          type: integer
          format: int32
          example: 0
        district:
          type: string
          example: DownTown
        street:
          type: string
          example: Broadway
        homeNum:
          type: string
          example: 123
        shiftDirectionsPL:
          type: string
          example: Z lewej strony budynku
        shiftDirectionsEN:
          type: string
          example: Left Side of Building
        shiftDirectionsUA:
          type: string
          example: Ліва сторона будівлі
        shiftDirectionsRU:
          type: string
          example: Левая сторона здания

    UserRequestDto:
      required:
        - firstName
        - lastName
        - email
        - phoneNumber
        - roles
        - password
      type: object
      properties:
        firstName:
          maxLength: 50
          minLength: 0
          type: string
          example: John
        lastName:
          maxLength: 50
          minLength: 0
          type: string
          example: Doe
        email:
          maxLength: 50
          minLength: 0
          type: string
          example: example@mail.com
        phoneNumber:
          maxLength: 9
          minLength: 9
          pattern: '[0-9]{9}'
          type: string
        roles:
          maxItems: 2147483647
          minItems: 1
          type: array
          items:
            type: integer
            format: int64
            example: 1
        isPeselVerified:
          type: boolean
        isAgreementSigned:
          type: boolean
        isAdult:
          type: boolean
        password:
          maxLength: 255
          minLength: 0
          type: string
          example: password
    UserResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: example@mail.com
        phoneNumber:
          type: string
          example: 000000000
        isPeselVerified:
          type: boolean
        isAgreementSigned:
          type: boolean
        isAdult:
          type: boolean
        roles:
          maxItems: 2147483647
          minItems: 1
          type: array
          items:
            type: string
            example: USER
        organisationId:
          type: integer
          format: int64
          example: 1
        organisationName:
          maxLength: 50
          minLength: 0
          type: string
          example: Wolontariat Gdanska
        shifts:
          type: array
          items:
            $ref: '#/components/schemas/ShiftResponseDto'
    UserShortResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        firstName:
          maxLength: 50
          minLength: 0
          type: string
          example: John
        lastName:
          maxLength: 50
          minLength: 0
          type: string
          example: Doe
        email:
          maxLength: 50
          minLength: 0
          type: string
          example: example@mail.com
        phoneNumber:
          maxLength: 9
          minLength: 9
          pattern: '[0-9]{9}'
          type: string
    LocalTime:
      type: object
      properties:
        hour:
          type: integer
          format: int32
        minute:
          type: integer
          format: int32
        second:
          type: integer
          format: int32
        nano:
          type: integer
          format: int32
